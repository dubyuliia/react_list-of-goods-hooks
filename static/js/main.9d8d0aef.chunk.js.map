{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortField","goodsFromServer","App","useState","sortField","setSortField","isOrderReversed","setIsOrderReversed","visibleGoods","goods","reverseOrder","preparedGoods","sort","good1","good2","Alphabetically","localeCompare","ByLength","length","reverse","getPreparedGoods","handleSort","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,qCAAAA,E,2BAAAA,M,KAoCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAAyB,IAA3D,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8CF,oBAAS,GAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KACMC,EA7BR,SAA0BC,EAA1B,GAC8C,IAA1CL,EAAyC,EAAzCA,UAAWM,EAA8B,EAA9BA,aACTC,EAAa,YAAOF,GAqBxB,OAnBIL,IACFO,EAAgBA,EAAcC,MAAK,SAACC,EAAOC,GACzC,OAAQV,GACN,KAAKJ,EAAUe,eACb,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAAUiB,SACb,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,OAKXR,GACFC,EAAcQ,UAGTR,EAMcS,CAAiBnB,EAAiB,CACrDG,YACAM,aAAcJ,IAGVe,EAAa,SAACT,GAAD,OAAqB,kBAAMP,EAAaO,KAO3D,OACE,sBAAKU,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYpB,IAAcJ,EAAUe,iBAEtCU,QAASJ,EAAWrB,EAAUe,gBALhC,iCAUA,wBACEQ,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYpB,IAAcJ,EAAUiB,WAEtCQ,QAASJ,EAAWrB,EAAUiB,UALhC,4BAUA,wBACEM,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,YAAalB,IAEfmB,QAAS,kBAAMlB,GAAoBD,IALrC,qBAUCF,GAAaE,EACZ,wBACEiB,KAAK,SACLD,UAAU,mBACVG,QA1CU,WAClBpB,EAAa,IACbE,GAAmB,IAqCb,mBAOE,QAGN,6BACGC,EAAakB,KAAI,SAACC,GAAD,OAChB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YChHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.9d8d0aef.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortField {\n  Alphabetically = 'Sort alphabetically',\n  ByLength = 'Sort by length',\n}\n\ninterface FilterParams {\n  sortField: SortField | '';\n  reverseOrder: boolean;\n}\n\nfunction getPreparedGoods(goods: string[],\n  { sortField, reverseOrder }: FilterParams) {\n  let preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods = preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortField.Alphabetically:\n          return good1.localeCompare(good2);\n\n        case SortField.ByLength:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverseOrder) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState<SortField | ''>('');\n  const [isOrderReversed, setIsOrderReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(goodsFromServer, {\n    sortField,\n    reverseOrder: isOrderReversed,\n  });\n\n  const handleSort = (sort: SortField) => () => setSortField(sort);\n\n  const handleReset = () => {\n    setSortField('');\n    setIsOrderReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortField !== SortField.Alphabetically,\n          })}\n          onClick={handleSort(SortField.Alphabetically)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortField !== SortField.ByLength,\n          })}\n          onClick={handleSort(SortField.ByLength)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !isOrderReversed,\n          })}\n          onClick={() => setIsOrderReversed(!isOrderReversed)}\n        >\n          Reverse\n        </button>\n\n        {sortField || isOrderReversed ? (\n          <button\n            type=\"button\"\n            className=\"button is-danger\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        ) : null}\n      </div>\n\n      <ul>\n        {visibleGoods.map((good) => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}